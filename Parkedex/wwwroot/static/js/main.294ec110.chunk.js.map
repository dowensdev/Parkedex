{"version":3,"sources":["app/stores/mapStore.ts","app/models/pagination.ts","app/api/agent.ts","app/stores/parkStore.ts","app/stores/userStore.ts","app/models/visitLog.ts","app/stores/visitLogStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/parkCommentStore.ts","features/errors/ServerError.tsx","app/common/search/Search.tsx","app/layout/LoaderComponent.tsx","app/common/form/AppDateInput.tsx","app/common/form/AppTextInput.tsx","app/common/form/AppTextArea.tsx","features/visits/form/VisitLogForm.tsx","features/parks/details/ParkDetails.tsx","features/parks/dashboard/AllParksList.tsx","features/parks/dashboard/ParkItemPlaceholder.tsx","features/parks/dashboard/VisitedParksList.tsx","features/parks/dashboard/ParkDashboard.tsx","features/parks/details/ParkCommentsSection.tsx","features/parks/details/ParkMap.tsx","features/parks/details/ParkDetailDashboard.tsx","features/visits/details/VisitLogDetails.tsx","features/visits/AllVisitLogList.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileDashboard.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/splash/SplashPage.tsx","features/visits/dashboard/ParkVisitLogList.tsx","features/visits/dashboard/VisitLogDashboard.tsx","app/common/modals/ModalContainer.tsx","app/layout/NavBar.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["MapStore","mapsURL","process","mapScriptLoaded","mapOptions","loadMapApi","scripts","document","getElementsByTagName","i","length","src","indexOf","googleMapScript","createElement","async","defer","window","body","appendChild","initMap","ref","current","google","maps","Map","setMapOptions","zoomLevel","coordinates","zoom","center","mapTypeControl","scaleControl","fullscreenControl","zoomControl","gestureHandling","mapTypeId","MapTypeId","ROADMAP","draggableCursor","makeAutoObservable","this","park","lat","latLong","split","lng","LatLng","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","console","log","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","reject","requests","url","get","then","post","put","delete","agent","Parks","getAll","params","id","Users","login","user","register","refreshToken","VisitedParks","getVisited","addVisited","removeVisited","VisitLogs","getVisitLogs","getVisitLog","addVisitLog","parkId","visitLog","editVisitLog","removeVisitLog","ParkStore","currentPark","undefined","allParkMap","currentParkImageMap","loadingInitial","pagingParams","parkSearch","setLoadingInitial","state","loadParks","axiosParams","result","forEach","setPark","setPagination","loadPark","getPark","set","runInAction","getCurrentImage","has","updateCurrentImage","images","nextImage","clearPark","setPagingParams","getParkSearchResults","clear","setParkSearch","input","Array","from","URLSearchParams","append","toString","UserStore","visitedParksMap","loadingVisitedList","loadingButtons","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","setVisitedParks","modalStore","closeModal","localStorage","removeItem","getUser","stopRefreshTokenTimer","hasVisited","size","setLoadingVisited","visitedParks","fullName","addVisitedPark","visitorCount","removeVisitedPark","jwtToken","atob","timeout","Date","exp","getTime","now","clearTimeout","sort","b","localeCompare","VisitLog","init","Object","assign","VisitLogFormValues","parkName","title","startDate","endDate","notes","parkRef","VisitLogStore","currentVisitLog","visitLogMap","loadingVisits","loadVisitLogs","setVisitLog","loadVisitLog","visitLogsByPark","values","filter","vl","parkStore","createVisitLog","newVisitLog","updatedVisitLog","deleteVisitLog","clearVisitLog","getItem","appLoaded","searchTimeout","setAppLoaded","reaction","setItem","modal","open","openModal","content","parkCommentStore","comments","hubConnection","createHubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","mapStore","visitLogStore","StoreContext","createContext","useStore","useContext","observer","Container","Header","as","sub","color","message","details","Segment","style","marginTop","Input","name","type","placeholder","onChange","e","currentTarget","value","onSearchChange","LoaderComponent","inverted","Dimmer","active","Loader","AppDateInput","props","useField","field","meta","helpers","Form","Field","touched","selected","setValue","Label","basic","AppTextInput","label","MyTextArea","logId","useState","validationSchema","Yup","required","min","useEffect","clearing","enableReinitialize","initialValues","onSubmit","finally","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","placeholderText","showFullMonthYearPicker","dateFormat","rows","Button","disabled","loading","floated","positive","Link","to","onClick","isLoggedIn","target","setTarget","changeTargetPark","Group","Item","Content","marginBottom","Popup","hoverable","position","trigger","margins","padding","Image","List","credit","href","Description","description","secondary","float","states","icon","allParks","map","ParkItemPlaceholder","Placeholder","fluid","Line","minHeight","allVisited","Menu","marginLeft","vertical","borderless","textAlign","loadingNext","setLoadingNext","Grid","Column","width","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","attached","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Author","displayName","Metadata","formatDistanceToNow","Text","setCoordinates","useRef","useParams","format","allVisitLogs","Divider","verticalAlign","Statistic","Value","AllVisitLogList","email","password","setErrors","render","ValidationErrors","Message","err","username","text","Modal","onClose","fixed","header","Icon","Dropdown","pointing","PrivateRoute","Component","component","remainder","exact","path","SplashPage","ParkDashboard","ParkDetailDashboard","VisitLogDashboard","ProfileDashboard","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","useLocation","scrollTo","createBrowserHistory","ReactDOM","Provider","getElementById"],"mappings":"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","file":"static/js/main.294ec110.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { RefObject } from \"react\";\r\nimport { Park } from \"../models/park\";\r\n\r\ntype GoogleLatLng = google.maps.LatLng;\r\n\r\nexport default class MapStore {\r\n    mapsURL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&v=quarterly`\r\n    mapScriptLoaded: boolean = false;\r\n    mapOptions: Object = {};\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    loadMapApi = () => {\r\n        const scripts = document.getElementsByTagName('script');\r\n        //look through returned scripts for mapsURL\r\n        for(let i = 0; i < scripts.length; i++) {\r\n            if(scripts[i].src.indexOf(this.mapsURL) === 0) {\r\n                return scripts[i];\r\n    \r\n            }\r\n        }\r\n    \r\n        //If not found on page already, create script and add it to page\r\n        const googleMapScript = document.createElement('script');\r\n        googleMapScript.src = this.mapsURL;\r\n        googleMapScript.async = true;\r\n        googleMapScript.defer = true;\r\n        window.document.body.appendChild(googleMapScript);\r\n        \r\n        this.mapScriptLoaded = true;\r\n        return googleMapScript;\r\n    }\r\n\r\n    initMap = (ref: RefObject<HTMLDivElement>) => {\r\n        if(ref.current) {\r\n            new google.maps.Map(ref.current, this.mapOptions)\r\n        }\r\n    }\r\n\r\n    setMapOptions = (zoomLevel: number, coordinates: GoogleLatLng) => {\r\n        this.mapOptions = {\r\n            zoom: zoomLevel,\r\n            center: coordinates,\r\n            mapTypeControl: true,\r\n            scaleControl: true,\r\n            fullscreenControl: true,\r\n            zoomControl: true,\r\n            gestureHandling: 'cooperative',\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            draggableCursor: 'pointer',\r\n        }\r\n    }\r\n\r\n    setCoordinates(park: Park): google.maps.LatLng {\r\n        const lat = +park.latLong.split(\",\")[0].split(\":\")[1]\r\n        const lng = +park.latLong.split(\",\")[1].split(\":\")[1]\r\n        return new google.maps.LatLng(lat, lng)\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number; \r\n    itemsPerPage: number; \r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 10) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Park } from '../models/park';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { history } from '../..'\r\nimport { VisitedPark } from '../models/visitedPark';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { VisitLog, VisitLogFormValues } from '../models/visitLog';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n//Sending token up with requests to API\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    //if(process.env.NODE_ENV === 'development') \r\n    await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n    }, (error: AxiosError) => {\r\n    const{data, status, config, headers} = error.response!;\r\n    switch(status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                console.log(data)\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors) {\r\n                    if(data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        //error capture for token timeout\r\n        case 401:\r\n            if(status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                console.log('session expired - please login again');\r\n            }\r\n            console.log(\"unauthorized\")\r\n            break;\r\n        case 404:\r\n            console.log(\"unauthorized\")\r\n            history.push('/not-found')\r\n            break;\r\n        //server errors capture formatted for better readability and logs to console, goes to default server error page \r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            console.log(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst data = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) =>axios.get<T>(url).then(data),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(data),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(data),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(data)\r\n}\r\n\r\nconst Parks = {\r\n    getAll: (params: URLSearchParams) => axios.get<PaginatedResult<Park[]>>('/parks', {params})\r\n        .then(data),\r\n    get: (id: string) => requests.get<Park>(`/parks/${id}`),\r\n}\r\n\r\nconst VisitedParks = {\r\n    getVisited: () => requests.get<VisitedPark[]>('/userparks/'),\r\n    addVisited: (id: string) => requests.put<void>(`/userparks/${id}`, {}),\r\n    removeVisited: (id: string) => requests.del<void>(`/userparks/${id}`)\r\n}\r\n\r\nconst VisitLogs = {\r\n    getVisitLogs: () => requests.get<VisitLog[]>('/visitlog/'),\r\n    getVisitLog: (id: string) => requests.get<VisitLog>(`/visitlog/${id}`),\r\n    addVisitLog: (parkId: string, visitLog: VisitLogFormValues) => requests.post<VisitLog>(`/visitlog/${parkId}`, visitLog),\r\n    editVisitLog: (visitLog: VisitLogFormValues) => requests.put<VisitLog>(`/visitlog/${visitLog.id}`, visitLog),\r\n    removeVisitLog: (id: string) => requests.del<void>(`/visitlog/${id}`)\r\n}\r\n\r\nconst Users = {\r\n    current: () => requests.get<User>('/user'),\r\n    login: (user: UserFormValues) => requests.post<User>('/user/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/user/register', user),\r\n    refreshToken: () => requests.post<User>('/user/refreshToken', {})\r\n}\r\n\r\nconst agent = {\r\n    Parks,\r\n    Users,\r\n    VisitedParks,\r\n    VisitLogs,\r\n}\r\n\r\nexport default agent;","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Park } from \"../models/park\";\r\n\r\nexport default class ParkStore {\r\n    currentPark: Park | undefined = undefined;\r\n    allParkMap = new Map<string, Park>();\r\n    currentParkImageMap = new Map<string, number>();\r\n    loadingInitial: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    parkSearch: string = '';\r\n    \r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.loadParks();\r\n    }\r\n    \r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    loadParks = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Parks.getAll(this.axiosParams);\r\n            console.log(result);\r\n            result.data.forEach(park => {\r\n               this.setPark(park);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadPark = async (id: string) => {\r\n        let park = this.getPark(id);\r\n        if(park) {\r\n            this.currentPark = park;\r\n            this.currentParkImageMap.set(park.id, 0);\r\n            return park;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                park = await agent.Parks.get(id);\r\n                this.setPark(park);\r\n                runInAction(() => {\r\n                    this.currentPark = park;\r\n                    if(this.currentPark !== undefined) {\r\n                        this.currentParkImageMap.set(this.currentPark.id, 0);\r\n                    }\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return park;\r\n            } catch(error) {\r\n                console.log(error)\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    get allParks() {\r\n        return Array.from(this.allParkMap)\r\n    }\r\n\r\n    getPark = (id: string) => {\r\n        return this.allParkMap.get(id);\r\n    }\r\n\r\n    private setPark = (park: Park) => {\r\n        this.allParkMap.set(park.id, park);\r\n        this.currentParkImageMap.set(park.id, 0);\r\n\r\n    }\r\n\r\n    //ImageRef functions\r\n    getCurrentImage = (id: string) => {\r\n        return (this.currentParkImageMap.has(id)) ? this.currentParkImageMap.get(id) : 0\r\n    }\r\n\r\n    updateCurrentImage = (id: string) => {\r\n        let park = this.getPark(id)\r\n        if(park && park.images.length !== 0) {\r\n            const currentImage = this.getCurrentImage(id) || 0;\r\n            const nextImage = (currentImage + 1) % park.images.length;\r\n            this.currentParkImageMap.set(id, nextImage);\r\n        }\r\n    }\r\n\r\n    clearPark = () => {\r\n        this.currentPark = undefined;\r\n    }\r\n\r\n     //Pagination functions\r\n     setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        params.append('search', this.parkSearch.toString());\r\n        return params;\r\n    }\r\n\r\n    //search functions\r\n    getParkSearchResults = () => {\r\n        this.allParkMap.clear();\r\n        this.pagingParams.pageNumber = 1;\r\n        this.loadParks();\r\n    }\r\n\r\n    setParkSearch = (input: string) => {\r\n        this.parkSearch = input;\r\n        console.log(this.parkSearch);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"../..\";\r\nimport { Park } from \"../models/park\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    visitedParksMap = new Map<string, string>();\r\n    loadingVisitedList: boolean = false;\r\n    loadingButtons: boolean = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Users.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => {\r\n                this.user = user;\r\n                this.setVisitedParks();\r\n            })\r\n            history.push('/parks');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        this.visitedParksMap.clear();\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Users.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Users.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n            history.push('/parks');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Users.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n\r\n    get allVisited() {\r\n        return Array.from(this.visitedParksMap).sort((a, b) => a[1].localeCompare(b[1]));\r\n    }\r\n\r\n    hasVisited = (id: string) => {\r\n        return this.visitedParksMap.size > 0 ? this.visitedParksMap.has(id) : false;\r\n    }\r\n\r\n    setVisitedParks = async () => {\r\n        this.setLoadingVisited(true);\r\n        if(store.userStore.user) {\r\n            try{\r\n                const visitedParks = await agent.VisitedParks.getVisited();\r\n                runInAction(() => {\r\n                    visitedParks.forEach(park => {\r\n                        this.visitedParksMap.set(park.id, park.fullName);\r\n                    })\r\n                    this.setLoadingVisited(false);\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingVisited(false);\r\n            }\r\n        }\r\n        this.setLoadingVisited(false);\r\n    }\r\n\r\n    addVisitedPark = async (park: Park) => {\r\n        this.loadingButtons = true;\r\n        if(store.userStore.user && !this.hasVisited(park.id)) {\r\n            try {\r\n                await agent.VisitedParks.addVisited(park.id)\r\n                runInAction(() => {\r\n                    this.visitedParksMap.set(park.id, park.fullName);\r\n                    park.visitorCount++;\r\n                    this.loadingButtons = false;\r\n                })\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.loadingButtons = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeVisitedPark = async (park: Park) => {\r\n        this.loadingButtons = true;\r\n        try {\r\n            await agent.VisitedParks.removeVisited(park.id)\r\n            runInAction(() => {\r\n                this.visitedParksMap.delete(park.id);\r\n                park.visitorCount--;\r\n                this.loadingButtons = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.loadingButtons = false;\r\n        }\r\n    }\r\n\r\n    setLoadingVisited = (state: boolean) => {\r\n        this.loadingVisitedList = state;\r\n    }\r\n}","export interface VisitLog {\r\n    id: string;\r\n    parkName: string;\r\n    title: string;\r\n    startDate: Date | null;\r\n    endDate: Date | null;\r\n    notes: string;\r\n    parkRef: string;\r\n}\r\n\r\nexport class VisitLog implements VisitLog {\r\n    constructor(init?: VisitLogFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class VisitLogFormValues {\r\n    id?: string = undefined;\r\n    parkName: string = '';\r\n    title: string = '';\r\n    startDate: Date | null = null;\r\n    endDate: Date | null = null;\r\n    notes: string = '';\r\n    parkRef: string = '';\r\n\r\n    constructor(visitLog?: VisitLogFormValues) {\r\n        if (visitLog) {\r\n          this.id = visitLog.id;\r\n          this.parkName = visitLog.parkName;\r\n          this.title = visitLog.title;\r\n          this.startDate = visitLog.startDate;\r\n          this.endDate = visitLog.endDate;\r\n          this.notes = visitLog.notes;\r\n          this.parkRef = visitLog.parkRef;\r\n        }\r\n      }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { VisitLog, VisitLogFormValues } from \"../models/visitLog\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class VisitLogStore {\r\n    currentVisitLog: VisitLog | undefined = undefined;\r\n    visitLogMap: Map<string, VisitLog> = new Map<string, VisitLog>();\r\n    loadingVisits: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.loadVisitLogs();\r\n    }\r\n\r\n    loadVisitLogs = async () => {\r\n        this.loadingVisits = true;\r\n        try {\r\n            const result = await agent.VisitLogs.getVisitLogs();\r\n            result.forEach(visitLog => {\r\n               this.setVisitLog(visitLog);\r\n            })\r\n            this.loadingVisits = false;\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.loadingVisits = false;\r\n        }\r\n    }\r\n\r\n    loadVisitLog = async (id: string) => {\r\n        let visitLog = this.getVisitLog(id);\r\n        if(visitLog) {\r\n            this.currentVisitLog = visitLog;\r\n            return visitLog;\r\n        } else {\r\n            this.loadingVisits = true;\r\n            try {\r\n                visitLog = await agent.VisitLogs.getVisitLog(id);\r\n                this.setVisitLog(visitLog);\r\n                runInAction(() => {\r\n                    this.currentVisitLog = visitLog;\r\n                    console.log(this.currentVisitLog);\r\n                    if(this.currentVisitLog !== undefined) {\r\n                        this.visitLogMap.set(this.currentVisitLog.id, this.currentVisitLog);\r\n                    }\r\n                });\r\n                this.loadingVisits = false\r\n                return visitLog;\r\n            } catch(error) {\r\n                console.log(error)\r\n                this.loadingVisits = false\r\n            }\r\n        }\r\n    }\r\n\r\n    getVisitLog = (id: string) => {\r\n        return this.visitLogMap.get(id);\r\n    }\r\n\r\n    visitLogsByPark = (parkId: string) => {\r\n        return Array.from(this.visitLogMap.values()).filter(vl => vl.parkRef === store.parkStore.getPark(parkId)?.id) || [];\r\n    }\r\n\r\n    get allVisitLogs() {\r\n        return Array.from(this.visitLogMap.values());\r\n    }\r\n\r\n    setVisitLog(visitLog: VisitLog) {\r\n        visitLog.startDate = new Date(visitLog.startDate!);\r\n        visitLog.endDate = new Date(visitLog.endDate!);\r\n        this.visitLogMap.set(visitLog.id, visitLog);\r\n    }\r\n\r\n    createVisitLog = async (parkId: string, visitLog: VisitLogFormValues) => {\r\n        try {\r\n            await agent.VisitLogs.addVisitLog(parkId, visitLog);\r\n            const newVisitLog = new VisitLog(visitLog);\r\n            this.setVisitLog(newVisitLog);\r\n            runInAction(() => {\r\n                console.log(this.currentVisitLog);\r\n                console.log(newVisitLog);\r\n                this.currentVisitLog = newVisitLog;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    editVisitLog = async (visitLog: VisitLogFormValues) => {\r\n        try {\r\n            await agent.VisitLogs.editVisitLog(visitLog);\r\n            runInAction(() => {\r\n                if (visitLog.id) {\r\n                    let updatedVisitLog = {...this.getVisitLog(visitLog.id), ...visitLog}\r\n                    this.visitLogMap.set(visitLog.id, updatedVisitLog as VisitLog);\r\n                    this.currentVisitLog = updatedVisitLog as VisitLog;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteVisitLog = async (id: string) => {\r\n        this.loadingVisits = true;\r\n        try {\r\n            await agent.VisitLogs.removeVisitLog(id);\r\n            runInAction(() => {\r\n                this.visitLogMap.delete(id);\r\n                this.loadingVisits = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingVisits = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearVisitLog = () => {\r\n        this.currentVisitLog = undefined;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CommonStore from \"./commonStore\";\r\nimport MapStore from \"./mapStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ParkCommentStore from \"./parkCommentStore\";\r\nimport ParkStore from \"./parkStore\";\r\nimport UserStore from \"./userStore\";\r\nimport VisitLogStore from \"./visitLogStore\";\r\n\r\ninterface Store {\r\n    commonStore: CommonStore;\r\n    parkStore: ParkStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    parkCommentStore: ParkCommentStore;\r\n    mapStore: MapStore;\r\n    visitLogStore: VisitLogStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    commonStore: new CommonStore(),\r\n    parkStore: new ParkStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    parkCommentStore: new ParkCommentStore(),\r\n    mapStore: new MapStore(),\r\n    visitLogStore: new VisitLogStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    searchTimeout: any;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token, \r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ParkComment } from \"../models/parkComment\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ParkCommentStore {\r\n    comments: ParkComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (parkId: string) => {\r\n        if(store.parkStore.currentPark) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?parkId=' + parkId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ParkComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ParkComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    \r\n    addComment = async (values: any) => {\r\n        values.parkId = store.parkStore.currentPark?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    \r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React, { SyntheticEvent } from 'react';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from '../../stores/store';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nexport default observer(function Search() {\r\n    const {parkStore, commonStore} = useStore();\r\n    const {getParkSearchResults, setParkSearch} = parkStore;\r\n    const {searchTimeout} = commonStore\r\n\r\n    function onSearchChange(e: SyntheticEvent<HTMLInputElement>) {\r\n        clearTimeout(searchTimeout);\r\n        if(e.currentTarget.value.length > 0) {\r\n            setParkSearch(e.currentTarget.value);\r\n        } else {\r\n            setParkSearch('');\r\n        }\r\n        setTimeout(getParkSearchResults, 1000);\r\n    }\r\n    \r\n    return (\r\n        <Input\r\n            name='search'\r\n            type='text'\r\n            placeholder='Search Parks'\r\n            onChange={(e) => onSearchChange(e)}\r\n            size='large'\r\n        />\r\n    )\r\n})\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoaderComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function AppDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function AppTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { VisitLogFormValues } from '../../../app/models/visitLog';\r\nimport { Park } from '../../../app/models/park';\r\nimport AppDateInput from '../../../app/common/form/AppDateInput';\r\nimport AppTextInput from '../../../app/common/form/AppTextInput';\r\nimport AppTextArea from '../../../app/common/form/AppTextArea';\r\n\r\ninterface Props {\r\n    park: Park;\r\n    logId: string;\r\n}\r\n\r\nexport default observer(function VisitLogForm({park, logId}: Props) {\r\n    const { visitLogStore, modalStore } = useStore();\r\n    const { createVisitLog, editVisitLog, loadVisitLog } = visitLogStore;\r\n\r\n    const [visitLog, setVisitLog] = useState<VisitLogFormValues>(new VisitLogFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The visit title is required'),\r\n        startDate: Yup.date().required('The start date is required'),\r\n        endDate: Yup.date().min(Yup.ref('startDate'), \"End date can not be before Start date\"),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (logId !== 'create') loadVisitLog(logId).then(visitLog => setVisitLog(new VisitLogFormValues(visitLog)))\r\n    }, [loadVisitLog, logId]);\r\n\r\n    function handleFormSubmit(visitLog: VisitLogFormValues) {\r\n        if (!visitLog.id) {\r\n            let newVisitLog = {\r\n                ...visitLog,\r\n                id: uuid(),\r\n                parkRef: park.id,\r\n                parkName: park.fullName\r\n            };\r\n            //Need park id here\r\n            createVisitLog(park.id, newVisitLog)\r\n                .finally(() => modalStore.closeModal());\r\n        } else {\r\n            editVisitLog(visitLog)\r\n                .finally(() => modalStore.closeModal());\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Visit Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={visitLog} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <AppTextInput name='title' placeholder='Title' />\r\n                        <Header content='Visit Dates' sub color='teal' />\r\n                        <AppDateInput \r\n                            placeholderText='Start Date'  \r\n                            name='startDate' \r\n                            showFullMonthYearPicker\r\n                            dateFormat='MMMM d, yyyy'\r\n                        />\r\n                        <AppDateInput \r\n                            placeholderText='End Date'  \r\n                            name='endDate' \r\n                            showFullMonthYearPicker\r\n                            dateFormat='MMMM d, yyyy'\r\n                        />\r\n                        <AppTextArea rows={5} placeholder='Notes' name='notes' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/parks' onClick={() => modalStore.closeModal()} floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Item, Image, Button, Segment, Container, Label, Popup, List} from 'semantic-ui-react';\r\nimport { Park } from '../../../app/models/park';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport VisitLogForm from '../../visits/form/VisitLogForm';\r\n\r\ninterface Props {\r\n    park: Park\r\n}\r\n\r\nexport default observer(function ParkDetails({park}: Props) {\r\n    const {userStore, parkStore, modalStore, visitLogStore} = useStore();\r\n    const {addVisitedPark, hasVisited, removeVisitedPark, loadingButtons, isLoggedIn } = userStore;\r\n    const {getCurrentImage, updateCurrentImage} = parkStore;\r\n    const {visitLogsByPark} = visitLogStore;\r\n    \r\n    const [target, setTarget] = useState('');\r\n    function changeTargetPark(e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group key={park.id} style={{marginTop: 10}}>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/parks/${park.id}`} style={{marginBottom:10}}>\r\n                                {park.fullName}\r\n                            </Item.Header>\r\n                            <Popup\r\n                                hoverable\r\n                                position='left center'\r\n                                trigger={\r\n                                    <Button onClick={() => updateCurrentImage(park.id)}style={{margins:'0', padding:'0'}}>\r\n                                        <Image src={park.images[getCurrentImage(park.id) || 0].url} size='huge'/>\r\n                                    </Button>\r\n                                }\r\n                            >\r\n                                <Popup.Content>\r\n                                    <List>\r\n                                        <List.Item>{park.images[getCurrentImage(park.id)!].title}</List.Item>\r\n                                        <List.Item>Credit: {park.images[getCurrentImage(park.id) || 0].credit}</List.Item>\r\n                                        <List.Item><a href={park.images[getCurrentImage(park.id) || 0].url}>{park.images[0].url}</a></List.Item>\r\n                                    </List>\r\n                                </Popup.Content>\r\n                            </Popup>\r\n                            <Item.Description>\r\n                                {park.description}\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment secondary clearing>\r\n                <Label size='medium' style={{float: 'right'}}>States: {park.states}</Label>\r\n                <Container>Latitude: {park.latLong.split(\",\")[0].split(\":\")[1]}</Container>\r\n                <Container>Longitude: {park.latLong.split(\",\")[1].split(\":\")[1]}</Container>\r\n            </Segment>  \r\n            <Segment clearing>\r\n                {(park.visitorCount === 1) ?\r\n                    <Label size='large'>{park.visitorCount} user has visited this park.</Label> :\r\n                    <Label size='large'>{park.visitorCount} users have visited this park.</Label>\r\n                }\r\n                {isLoggedIn ?\r\n                    hasVisited(park.id) ? (\r\n                        <>\r\n                            {visitLogsByPark(park.id).length > 0 &&\r\n                                <Button \r\n                                    name={park.id}\r\n                                    as={Link} to={`/visitlog/${park.id}`}\r\n                                    content={visitLogsByPark(park.id).length}\r\n                                    onClick={(e) => {\r\n                                        changeTargetPark(e);\r\n                                    }}\r\n                                    style={{float:'right', color: 'green'}}\r\n                                />\r\n                            }\r\n                            <Button \r\n                                onClick={() => modalStore.openModal(<VisitLogForm park={park} logId={'create'} />)} \r\n                                icon='plus' \r\n                                style={{float:'right', color: 'green'}}\r\n                            />\r\n                            <Button name={park.id} \r\n                                loading={loadingButtons && target === park.id} \r\n                                disabled={loadingButtons && target === park.id} \r\n                                onClick={(e) => {\r\n                                    changeTargetPark(e);\r\n                                    removeVisitedPark(park);\r\n                                    }\r\n                                } \r\n                                content='Visited' \r\n                                icon='check' \r\n                                style={{float:'right', color: 'green'}} \r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <Button name={park.id} \r\n                            loading={loadingButtons && target === park.id} \r\n                            disabled={loadingButtons && target === park.id} \r\n                            onClick={(e) => {\r\n                                changeTargetPark(e);\r\n                                addVisitedPark(park);\r\n                                }\r\n                            } \r\n                            content = 'Not Visited'\r\n                            icon='x' \r\n                            style={{float:'right', color: 'red'}} />\r\n                    ) : (\r\n                        <Popup\r\n                            hoverable\r\n                            position='right center'\r\n                            content='Create an account to use this feature!'\r\n                            trigger={\r\n                                <Button\r\n                                     \r\n                                    content = 'Not Visited'\r\n                                    icon='x' \r\n                                    style={{float:'right', color: 'red'}} />\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Search from '../../../app/common/search/Search';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkDetails from '../details/ParkDetails';\r\n\r\nexport default observer(function AllParksList() {\r\n    const {parkStore} = useStore();\r\n    const {allParks} = parkStore;\r\n    \r\n    return (\r\n        <>\r\n            {allParks.map(([id, park]) => (\r\n                <ParkDetails key={id} park={park}/>\r\n            ))}\r\n        </>      \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder, Item, PlaceholderLine } from 'semantic-ui-react';\r\n\r\nexport default function ParkItemPlaceholder() {\r\n    return (\r\n        <Fragment >\r\n            <Placeholder fluid style={{marginTop: 10}}>\r\n                <Segment.Group >\r\n                    <Segment>\r\n                        <Item.Group>\r\n                            <Item>\r\n                                <Item.Content>\r\n                                    <Placeholder fluid>\r\n                                        <Placeholder.Line length='medium' />\r\n                                        <Placeholder.Image fluid style={{ minHeight: 400, marginBottom: 10 }}></Placeholder.Image>\r\n                                    </Placeholder>\r\n                                    <Item.Description>\r\n                                        <Placeholder fluid>\r\n                                            <Placeholder.Line length='full'/>\r\n                                            <Placeholder.Line length='full'/>\r\n                                            <Placeholder.Line length='full'/>\r\n                                            <Placeholder.Line length='full'/>\r\n                                        </Placeholder>\r\n                                    </Item.Description>\r\n                                </Item.Content>\r\n                            </Item>\r\n                        </Item.Group>\r\n                    </Segment>\r\n                    <Segment secondary clearing style={{ minHeight: 50 }}>\r\n                        <Placeholder fluid>             \r\n                            <Placeholder.Line length='medium'/>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment clearing>\r\n                        <Button disabled color='grey' floated='right' icon='x' content='Not Visited' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nexport default observer(function VisitedParksList() {\r\n    const {userStore} = useStore();\r\n    const {visitedParksMap, allVisited} = userStore;\r\n\r\n    return (\r\n        <>\r\n            {visitedParksMap.size > 0 ? \r\n                <Menu style={{marginLeft:10}} vertical borderless>\r\n                    <Header content='Visited Parks' textAlign='center' style={{marginTop:10}} />\r\n                    {allVisited.map((park) => (\r\n                        <Menu.Item key={park[0]} as={Link} to={`/parks/${park[0]}`} >\r\n                            {park[1]}\r\n                        </Menu.Item>\r\n                    ))}\r\n                </Menu> :\r\n                <Header content='You have not visited any parks' textAlign='center'/>\r\n            }\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport Search from '../../../app/common/search/Search';\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport AllParksList from './AllParksList';\r\nimport ParkItemPlaceholder from './ParkItemPlaceholder';\r\nimport VisitedParksList from './VisitedParksList';\r\n\r\nexport default observer(function ParkDashboard() {\r\n    const {userStore, parkStore } = useStore();\r\n    const {loadParks, setPagingParams, pagination} = parkStore;\r\n    const {getUser, setVisitedParks, loadingVisitedList, isLoggedIn} = userStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadParks().then(() =>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(getUser != null) setVisitedParks();\r\n    }, [getUser, setVisitedParks])\r\n\r\n\r\n    if (isLoggedIn && loadingVisitedList)  return <LoaderComponent content='Loading Visited Parks' />;\r\n\r\n    return (\r\n        <>\r\n            <Grid>\r\n                <Grid.Column width='11'>\r\n                <Search />\r\n                {parkStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ParkItemPlaceholder />\r\n                        <ParkItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <AllParksList />\r\n                    </InfiniteScroll>\r\n                )}\r\n                </Grid.Column>\r\n                <Grid.Column width='5'>\r\n                    <VisitedParksList />\r\n                </Grid.Column>\r\n                <Grid.Column width={10}>\r\n                    <Loader active={loadingNext} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    parkId: string;\r\n}\r\n\r\nexport default observer(function ParkCommentsSection({parkId}: Props) {\r\n    const {parkCommentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(parkId) {\r\n            parkCommentStore.createHubConnection(parkId);\r\n        }\r\n        return () => {\r\n            parkCommentStore.clearComments();\r\n        }\r\n    }, [parkCommentStore, parkId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='left'\r\n                attached='top'\r\n                inverted\r\n                color='grey'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Comments</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik \r\n                    onSubmit={(values, {resetForm}) => parkCommentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{body:''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                        placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                        rows={2}\r\n                                        {...props.field}\r\n                                        onKeyPress={e => {\r\n                                            if (e.key === 'Enter' && e.shiftKey) {\r\n                                                return;\r\n                                            }\r\n                                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {parkCommentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                        <Comment.Content>\r\n                            <Comment.Author>{comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useRef } from 'react'\r\nimport { Park } from '../../../app/models/park';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    park: Park;\r\n}\r\n\r\nexport default observer(function ParkMap({park}: Props) {\r\n    const {mapStore} = useStore();\r\n    const {initMap, setMapOptions, setCoordinates} = mapStore;\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setMapOptions(11, setCoordinates(park));\r\n        initMap(ref);\r\n\r\n    }, [initMap, setMapOptions, setCoordinates, park]);\r\n\r\n    return (\r\n            <div className=\"map-container\" ref={ref}></div>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkCommentsSection from './ParkCommentsSection';\r\nimport ParkDetails from './ParkDetails';\r\nimport ParkMap from './ParkMap';\r\n\r\nexport default observer(function ParkDetailDashboard() {\r\n    const {parkStore, mapStore} = useStore();\r\n    const {currentPark: park, loadingInitial, loadPark} = parkStore;\r\n    const {mapScriptLoaded} = mapStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id) loadPark(id); \r\n    }, [id, loadPark]);\r\n\r\n\r\n\r\n    if (loadingInitial || !park) return <LoaderComponent content='Loading Park.'/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ParkDetails park={park}/>\r\n                <ParkCommentsSection parkId={park.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {mapScriptLoaded && (\r\n                    <ParkMap park={park}/>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Label, Segment } from 'semantic-ui-react';\r\nimport { VisitLog } from '../../../app/models/visitLog';\r\nimport {format} from 'date-fns';\r\nimport VisitLogForm from '../form/VisitLogForm';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    visitLog: VisitLog;\r\n}\r\n\r\nexport default observer(function VisitLogDetails({visitLog}: Props) {\r\n    const {modalStore, parkStore, visitLogStore} = useStore();\r\n    const {deleteVisitLog, loadingVisits} = visitLogStore;\r\n    const {currentPark: park} = parkStore;\r\n\r\n    const [target, setTarget] = useState('');\r\n    function changeTargetPark(e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group>\r\n                <Segment clearing>\r\n                    <Header as={Link} to={`/visitlog/${visitLog.parkRef}`} style={{marginBottom:10}}>\r\n                        {visitLog.title}\r\n                    </Header>\r\n                    \r\n                    <Button\r\n                        name={visitLog.id} \r\n                        loading={loadingVisits && target === visitLog.id}\r\n                        onClick={(e) => {\r\n                            changeTargetPark(e);\r\n                            deleteVisitLog(visitLog.id);\r\n                            }\r\n                        }\r\n                        color='red'\r\n                        icon='x' \r\n                        floated='right'></Button>\r\n                    <Button onClick={() =>\r\n                        modalStore.openModal(<VisitLogForm park={park!} logId={visitLog.id} />)} \r\n                        icon='edit'\r\n                        color='blue' \r\n                        floated='right' />\r\n                </Segment>\r\n                <Segment secondary clearing>\r\n                    <Label as={Link} to={`/parks/${visitLog.parkRef}`} style={{marginBottom:10}}>\r\n                        {visitLog.parkName}\r\n                    </Label>\r\n                    <Container>Start Date: {format(visitLog.startDate!, 'dd MMM yyyy')}</Container>\r\n                    <Container>End Date: {format(visitLog.endDate!, 'dd MMM yyyy')}</Container>\r\n                </Segment>\r\n                <Segment>\r\n                    <Container>{visitLog.notes}</Container>\r\n                </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Header } from \"semantic-ui-react\";\r\nimport { VisitLog } from \"../../app/models/visitLog\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport VisitLogDetails from \"./details/VisitLogDetails\";\r\n\r\nexport default observer(function ParkVisitLogList() {\r\n    const {visitLogStore} = useStore();\r\n    const {allVisitLogs} = visitLogStore;\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='All Visits' textAlign='center'/>\r\n            <Divider></Divider>\r\n            {allVisitLogs.map((visitLog: VisitLog) => (\r\n                <VisitLogDetails key={visitLog.id} visitLog={visitLog} />\r\n            ))}\r\n        </>      \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { User } from '../../app/models/user';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nexport default observer(function ProfileHeader({user}: Props) {\r\n    const {userStore} = useStore();\r\n    const {allVisited} = userStore;\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={user.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic>\r\n                        <Statistic.Value>{allVisited.length}</Statistic.Value>\r\n                        <Statistic.Label>Parks Visited</Statistic.Label>\r\n                    </Statistic>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport AllVisitLogList from '../visits/AllVisitLogList';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { userStore } = useStore();\r\n    const { user } = userStore;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {user &&\r\n                    <>\r\n                        <ProfileHeader user={user} />\r\n                        <AllVisitLogList />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport AppTextInput from '../../app/common/form/AppTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n                initialValues={{email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                    setErrors({error: 'Invalid email or password'}))}    \r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Parkedex' textAlign='center' />\r\n                    <AppTextInput name='email' placeholder='Email' />\r\n                    <AppTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{marginBottom:10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n            \r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport AppTextInput from '../../app/common/form/AppTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n                initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                    setErrors({error}))}   \r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Register at Parkedex' textAlign='center' />\r\n                    <AppTextInput name='displayName' placeholder='Display Name' />\r\n                    <AppTextInput name='username' placeholder='Username' />\r\n                    <AppTextInput name='email' placeholder='Email' />\r\n                    <AppTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n            \r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' size='huge' inverted>\r\n                    Parkedex\r\n                </Header>\r\n                <Header as='h2' size='medium' style={{marginTop: 10}} inverted>\r\n                    Gotta Visit 'Em All!\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Parkedex' />\r\n                        <Button as={Link} to='/parks' size='huge' inverted>\r\n                            Go to the Parks!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Divider></Divider>\r\n                            <Header as={Link} to='/parks' size='tiny' inverted>\r\n                                I just want National Park Info!\r\n                            </Header>\r\n                        </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Header } from 'semantic-ui-react';\r\nimport { Park } from '../../../app/models/park';\r\nimport { VisitLog } from '../../../app/models/visitLog';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport VisitLogDetails from '../details/VisitLogDetails';\r\n\r\ninterface Props {\r\n    park: Park;\r\n}\r\n\r\nexport default observer(function ParkVisitLogList({park}: Props) {\r\n    const {visitLogStore} = useStore();\r\n    const {visitLogsByPark} = visitLogStore;\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Visits' textAlign='center'/>\r\n            <Divider></Divider>\r\n            {visitLogsByPark(park.id).map((visitLog: VisitLog) => (\r\n                <VisitLogDetails key={visitLog.id} visitLog={visitLog} />\r\n            ))}\r\n        </>      \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkDetails from '../../parks/details/ParkDetails';\r\nimport ParkMap from '../../parks/details/ParkMap';\r\nimport ParkVisitLogList from './ParkVisitLogList';\r\n\r\nexport default observer(function VisitLogDashboard() {\r\n    const {visitLogStore, parkStore, userStore, mapStore} = useStore();\r\n    const {loadVisitLogs } = visitLogStore;\r\n    const {getUser, setVisitedParks, isLoggedIn} = userStore;\r\n    const {currentPark, loadPark, clearPark } = parkStore;\r\n    const {mapScriptLoaded} = mapStore;\r\n    const { id } = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        loadPark(id);\r\n        return() => {\r\n            clearPark()\r\n        } \r\n    }, [loadPark, clearPark, id]);\r\n\r\n    useEffect(() => {\r\n        if(getUser != null) {\r\n            setVisitedParks();\r\n            loadVisitLogs();\r\n        } \r\n    }, [getUser, setVisitedParks, loadVisitLogs])\r\n    \r\n    if (!currentPark || !isLoggedIn) return <LoaderComponent content='Loading Visit Details'/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ParkDetails park={currentPark}/>\r\n                    <ParkVisitLogList park={currentPark}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {mapScriptLoaded && (\r\n                    <ParkMap park={currentPark}/>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            {modalStore.modal.body}\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Dropdown, Icon, Menu } from 'semantic-ui-react';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport RegisterForm from '../../features/users/RegisterForm';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: {user, logout, isLoggedIn}, modalStore } = useStore();\r\n\r\n    return(\r\n        <Menu borderless fixed='top'>\r\n            <Container>\r\n                <Menu.Item header as={Link} to={'/parks'}>\r\n                    <Icon name='tree' />\r\n                    Parkedex\r\n                </Menu.Item>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Menu.Item as={Link} to={`/profile/${user?.displayName}`}>\r\n                            My Visits\r\n                        </Menu.Item> \r\n                        <Menu.Item position='right'>\r\n                            <Dropdown position='right' pointing='top left' text={user!.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profile/${user?.displayName}`} \r\n                                        text='My Profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Menu.Item onClick={() => modalStore.openModal(<LoginForm />)} name='Login' position='right' /> \r\n                        <Menu.Item onClick={() => modalStore.openModal(<RegisterForm />)} name='Register' /> \r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...remainder}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...remainder}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Container } from 'semantic-ui-react';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport ParkDashboard from '../../features/parks/dashboard/ParkDashboard';\r\nimport ParkDetailDashboard from '../../features/parks/details/ParkDetailDashboard';\r\nimport ProfileDashboard from '../../features/profiles/ProfileDashboard';\r\nimport SplashPage from '../../features/splash/SplashPage';\r\nimport VisitLogDashboard from '../../features/visits/dashboard/VisitLogDashboard';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport { useStore } from '../stores/store';\r\nimport LoaderComponent from './LoaderComponent';\r\nimport NavBar from './NavBar';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const {commonStore, userStore, mapStore, visitLogStore} = useStore();\r\n\r\n  //if token exists attempts to get user info. If successfully loads visited parks list\r\n  //then loads all visit logs and then opens app\r\n  useEffect(() => {\r\n    if (commonStore.token) { \r\n        userStore.getUser().then(() => userStore.setVisitedParks())\r\n          .then(() => visitLogStore.loadVisitLogs)\r\n          .finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore, visitLogStore])\r\n\r\n  //checks if map script appears in root html and if not loads helper function from map store\r\n  useEffect(() => {\r\n    if(!mapStore.mapScriptLoaded) mapStore.loadMapApi(); \r\n  }, [mapStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoaderComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n    <ModalContainer />\r\n    <Route exact path='/' component={SplashPage} /> \r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => {\r\n          return (\r\n            <>\r\n              <NavBar />\r\n              <Container style={{ marginTop: '7em' }}>\r\n                <Route exact path='/parks' component={ParkDashboard} />\r\n                <Route path='/parks/:id' component ={ParkDetailDashboard} />\r\n                <PrivateRoute path='/visitlog/:id' component ={VisitLogDashboard} />\r\n                <PrivateRoute path='/profile/:username' component={ProfileDashboard} />\r\n                <Route path='/server-error' component={ServerError} />\r\n              </Container>\r\n            </>\r\n          );\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './app/layout/styles.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <StoreContext.Provider value={store}>\r\n      <Router history={history}>\r\n        <ScrollToTop />\r\n        <App />\r\n      </Router>\r\n    </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}