{"version":3,"sources":["app/stores/mapStore.ts","app/models/pagination.ts","app/api/agent.ts","app/stores/parkStore.ts","app/stores/userStore.ts","app/models/visitLog.ts","app/stores/visitLogStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/parkCommentStore.ts","features/errors/ServerError.tsx","app/layout/LoaderComponent.tsx","app/common/form/AppDateInput.tsx","app/common/form/AppTextInput.tsx","app/common/form/AppTextArea.tsx","features/visits/form/VisitLogForm.tsx","features/parks/details/ParkDetails.tsx","features/parks/dashboard/AllParksList.tsx","features/parks/dashboard/VisitedParksList.tsx","features/parks/dashboard/ParkDashboard.tsx","features/parks/details/ParkCommentsSection.tsx","features/parks/details/ParkMap.tsx","features/parks/details/ParkDetailDashboard.tsx","features/visits/details/VisitLogDetails.tsx","features/visits/AllVisitLogList.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileDashboard.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/splash/SplashPage.tsx","features/visits/dashboard/ParkVisitLogList.tsx","features/visits/dashboard/VisitLogDashboard.tsx","app/common/modals/ModalContainer.tsx","app/layout/NavBar.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["MapStore","mapsURL","process","mapScriptLoaded","mapOptions","loadMapApi","scripts","document","getElementsByTagName","i","length","src","indexOf","googleMapScript","createElement","async","defer","window","body","appendChild","initMap","ref","current","google","maps","Map","setMapOptions","zoomLevel","coordinates","zoom","center","mapTypeControl","scaleControl","fullscreenControl","zoomControl","gestureHandling","mapTypeId","MapTypeId","ROADMAP","draggableCursor","makeAutoObservable","this","park","lat","latLong","split","lng","LatLng","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","console","log","Promise","reject","requests","url","get","then","post","put","delete","agent","Parks","getAll","params","id","Users","login","user","register","VisitedParks","getVisited","addVisited","removeVisited","VisitLogs","getVisitLogs","getVisitLog","addVisitLog","parkId","visitLog","editVisitLog","removeVisitLog","ParkStore","currentPark","undefined","allParkMap","currentParkImageMap","loadingInitial","pagingParams","setLoadingInitial","state","loadParks","axiosParams","result","forEach","setPark","setPagination","loadPark","getPark","set","runInAction","getCurrentImage","has","updateCurrentImage","images","nextImage","clearPark","setPagingParams","Array","from","URLSearchParams","append","toString","UserStore","visitedParksMap","loadingVisitedList","loadingButtons","creds","setToken","setVisitedParks","modalStore","closeModal","logout","localStorage","removeItem","clear","getUser","hasVisited","size","setLoadingVisited","userStore","visitedParks","fullName","addVisitedPark","visitorCount","removeVisitedPark","sort","b","localeCompare","VisitLog","init","Object","assign","VisitLogFormValues","parkName","title","startDate","endDate","notes","parkRef","VisitLogStore","currentVisitLog","visitLogMap","loadingVisits","loadVisitLogs","setVisitLog","loadVisitLog","visitLogsByPark","values","filter","vl","parkStore","createVisitLog","newVisitLog","updatedVisitLog","deleteVisitLog","clearVisitLog","Date","getItem","appLoaded","setAppLoaded","reaction","setItem","modal","open","openModal","content","parkCommentStore","comments","hubConnection","createHubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","mapStore","visitLogStore","StoreContext","createContext","useStore","useContext","observer","Container","Header","as","sub","color","message","details","Segment","style","marginTop","LoaderComponent","inverted","Dimmer","active","Loader","AppDateInput","props","useField","name","field","meta","helpers","Form","Field","touched","selected","value","onChange","setValue","Label","basic","AppTextInput","label","MyTextArea","logId","useHistory","useState","validationSchema","Yup","required","min","useEffect","clearing","enableReinitialize","initialValues","onSubmit","finally","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","placeholder","placeholderText","showFullMonthYearPicker","dateFormat","rows","Button","disabled","loading","floated","positive","type","Link","to","onClick","isLoggedIn","target","setTarget","changeTargetPark","e","currentTarget","Group","Item","Content","marginBottom","Popup","hoverable","position","trigger","margins","padding","Image","List","credit","href","Description","description","secondary","float","states","icon","allParks","map","allVisited","Menu","marginLeft","vertical","borderless","textAlign","loadingNext","setLoadingNext","Grid","Column","width","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","attached","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Author","displayName","Metadata","formatDistanceToNow","Text","setCoordinates","useRef","useParams","format","allVisitLogs","Divider","verticalAlign","Statistic","Value","AllVisitLogList","email","password","setErrors","render","fluid","ValidationErrors","Message","err","username","text","Modal","onClose","fixed","header","Icon","Dropdown","pointing","PrivateRoute","Component","component","remainder","exact","path","SplashPage","ParkDashboard","ParkDetailDashboard","VisitLogDashboard","ProfileDashboard","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","useLocation","scrollTo","createBrowserHistory","ReactDOM","Provider","getElementById"],"mappings":"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","file":"static/js/main.43fd8371.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { RefObject } from \"react\";\r\nimport { Park } from \"../models/park\";\r\n\r\ntype GoogleLatLng = google.maps.LatLng;\r\n\r\nexport default class MapStore {\r\n    mapsURL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&v=quarterly`\r\n    mapScriptLoaded: boolean = false;\r\n    mapOptions: Object = {};\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    loadMapApi = () => {\r\n        const scripts = document.getElementsByTagName('script');\r\n        //look through returned scripts for mapsURL\r\n        for(let i = 0; i < scripts.length; i++) {\r\n            if(scripts[i].src.indexOf(this.mapsURL) === 0) {\r\n                return scripts[i];\r\n    \r\n            }\r\n        }\r\n    \r\n        //If not found on page already, create script and add it to page\r\n        const googleMapScript = document.createElement('script');\r\n        googleMapScript.src = this.mapsURL;\r\n        googleMapScript.async = true;\r\n        googleMapScript.defer = true;\r\n        window.document.body.appendChild(googleMapScript);\r\n        \r\n        this.mapScriptLoaded = true;\r\n        return googleMapScript;\r\n    }\r\n\r\n    initMap = (ref: RefObject<HTMLDivElement>) => {\r\n        if(ref.current) {\r\n            new google.maps.Map(ref.current, this.mapOptions)\r\n        }\r\n    }\r\n\r\n    setMapOptions = (zoomLevel: number, coordinates: GoogleLatLng) => {\r\n        this.mapOptions = {\r\n            zoom: zoomLevel,\r\n            center: coordinates,\r\n            mapTypeControl: true,\r\n            scaleControl: true,\r\n            fullscreenControl: true,\r\n            zoomControl: true,\r\n            gestureHandling: 'cooperative',\r\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            draggableCursor: 'pointer',\r\n        }\r\n    }\r\n\r\n    setCoordinates(park: Park): google.maps.LatLng {\r\n        const lat = +park.latLong.split(\",\")[0].split(\":\")[1]\r\n        const lng = +park.latLong.split(\",\")[1].split(\":\")[1]\r\n        return new google.maps.LatLng(lat, lng)\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number; \r\n    itemsPerPage: number; \r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 10) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Park } from '../models/park';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { history } from '../..'\r\nimport { VisitedPark } from '../models/visitedPark';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { VisitLog, VisitLogFormValues } from '../models/visitLog';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n//Sending token up with requests to API\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n    }, (error: AxiosError) => {\r\n    const{data, status, config} = error.response!;\r\n    switch(status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                //toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors) {\r\n                    if(data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            //toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            console.log(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst data = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) =>axios.get<T>(url).then(data),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(data),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(data),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(data)\r\n}\r\n\r\nconst Parks = {\r\n    getAll: (params: URLSearchParams) => axios.get<PaginatedResult<Park[]>>('/parks', {params})\r\n        .then(data),\r\n    get: (id: string) => requests.get<Park>(`/parks/${id}`)\r\n}\r\n\r\nconst VisitedParks = {\r\n    getVisited: () => requests.get<VisitedPark[]>('/userparks/'),\r\n    addVisited: (id: string) => requests.put<void>(`/userparks/${id}`, {}),\r\n    removeVisited: (id: string) => requests.del<void>(`/userparks/${id}`)\r\n}\r\n\r\nconst VisitLogs = {\r\n    getVisitLogs: () => requests.get<VisitLog[]>('/visitlog/'),\r\n    getVisitLog: (id: string) => requests.get<VisitLog>(`/visitlog/${id}`),\r\n    addVisitLog: (parkId: string, visitLog: VisitLogFormValues) => requests.post<VisitLog>(`/visitlog/${parkId}`, visitLog),\r\n    editVisitLog: (visitLog: VisitLogFormValues) => requests.put<VisitLog>(`/visitlog/${visitLog.id}`, visitLog),\r\n    removeVisitLog: (id: string) => requests.del<void>(`/visitlog/${id}`)\r\n}\r\n\r\nconst Users = {\r\n    current: () => requests.get<User>('/user'),\r\n    login: (user: UserFormValues) => requests.post<User>('/user/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/user/register', user),\r\n}\r\n\r\nconst agent = {\r\n    Parks,\r\n    Users,\r\n    VisitedParks,\r\n    VisitLogs,\r\n}\r\n\r\nexport default agent;","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Park } from \"../models/park\";\r\n\r\nexport default class ParkStore {\r\n    currentPark: Park | undefined = undefined;\r\n    allParkMap = new Map<string, Park>();\r\n    currentParkImageMap = new Map<string, number>();\r\n    loadingInitial: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    \r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.loadParks();\r\n    }\r\n    \r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    loadParks = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Parks.getAll(this.axiosParams);\r\n            result.data.forEach(park => {\r\n               this.setPark(park);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadPark = async (id: string) => {\r\n        let park = this.getPark(id);\r\n        if(park) {\r\n            this.currentPark = park;\r\n            this.currentParkImageMap.set(park.id, 0);\r\n            return park;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                park = await agent.Parks.get(id);\r\n                this.setPark(park);\r\n                runInAction(() => {\r\n                    this.currentPark = park;\r\n                    if(this.currentPark !== undefined) {\r\n                        this.currentParkImageMap.set(this.currentPark.id, 0);\r\n                    }\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return park;\r\n            } catch(error) {\r\n                console.log(error)\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    get allParks() {\r\n        return Array.from(this.allParkMap)\r\n    }\r\n\r\n    getPark = (id: string) => {\r\n        return this.allParkMap.get(id);\r\n    }\r\n\r\n    private setPark = (park: Park) => {\r\n        this.allParkMap.set(park.id, park);\r\n        this.currentParkImageMap.set(park.id, 0);\r\n\r\n    }\r\n\r\n    //ImageRef functions\r\n    getCurrentImage = (id: string) => {\r\n        return (this.currentParkImageMap.has(id)) ? this.currentParkImageMap.get(id) : 0\r\n    }\r\n\r\n    updateCurrentImage = (id: string) => {\r\n        let park = this.getPark(id)\r\n        if(park && park.images.length !== 0) {\r\n            const currentImage = this.getCurrentImage(id) || 0;\r\n            const nextImage = (currentImage + 1) % park.images.length;\r\n            this.currentParkImageMap.set(id, nextImage);\r\n        }\r\n    }\r\n\r\n    clearPark = () => {\r\n        this.currentPark = undefined;\r\n    }\r\n\r\n     //Pagination functions\r\n     setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        return params;\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"../..\";\r\nimport { Park } from \"../models/park\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    visitedParksMap = new Map<string, string>();\r\n    loadingVisitedList: boolean = false;\r\n    loadingButtons: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Users.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n                this.setVisitedParks();\r\n            })\r\n            history.push('/parks');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        this.visitedParksMap.clear();\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Users.current();\r\n            runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        \r\n        try{\r\n            const user = await agent.Users.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/parks');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    get allVisited() {\r\n        return Array.from(this.visitedParksMap).sort((a, b) => a[1].localeCompare(b[1]));\r\n    }\r\n\r\n    hasVisited = (id: string) => {\r\n        return this.visitedParksMap.size > 0 ? this.visitedParksMap.has(id) : false;\r\n    }\r\n\r\n    setVisitedParks = async () => {\r\n        this.setLoadingVisited(true);\r\n        if(store.userStore.user) {\r\n            try{\r\n                const visitedParks = await agent.VisitedParks.getVisited();\r\n                runInAction(() => {\r\n                    visitedParks.forEach(park => {\r\n                        this.visitedParksMap.set(park.id, park.fullName);\r\n                    })\r\n                    this.setLoadingVisited(false);\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingVisited(false);\r\n            }\r\n        }\r\n        this.setLoadingVisited(false);\r\n    }\r\n\r\n    addVisitedPark = async (park: Park) => {\r\n        this.loadingButtons = true;\r\n        if(store.userStore.user && !this.hasVisited(park.id)) {\r\n            try {\r\n                await agent.VisitedParks.addVisited(park.id)\r\n                runInAction(() => {\r\n                    this.visitedParksMap.set(park.id, park.fullName);\r\n                    park.visitorCount++;\r\n                    this.loadingButtons = false;\r\n                })\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.loadingButtons = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeVisitedPark = async (park: Park) => {\r\n        this.loadingButtons = true;\r\n        try {\r\n            await agent.VisitedParks.removeVisited(park.id)\r\n            runInAction(() => {\r\n                this.visitedParksMap.delete(park.id);\r\n                park.visitorCount--;\r\n                this.loadingButtons = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.loadingButtons = false;\r\n        }\r\n    }\r\n\r\n    setLoadingVisited = (state: boolean) => {\r\n        this.loadingVisitedList = state;\r\n    }\r\n}","export interface VisitLog {\r\n    id: string;\r\n    parkName: string;\r\n    title: string;\r\n    startDate: Date | null;\r\n    endDate: Date | null;\r\n    notes: string;\r\n    parkRef: string;\r\n}\r\n\r\nexport class VisitLog implements VisitLog {\r\n    constructor(init?: VisitLogFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class VisitLogFormValues {\r\n    id?: string = undefined;\r\n    parkName: string = '';\r\n    title: string = '';\r\n    startDate: Date | null = null;\r\n    endDate: Date | null = null;\r\n    notes: string = '';\r\n    parkRef: string = '';\r\n\r\n    constructor(visitLog?: VisitLogFormValues) {\r\n        if (visitLog) {\r\n          this.id = visitLog.id;\r\n          this.parkName = visitLog.parkName;\r\n          this.title = visitLog.title;\r\n          this.startDate = visitLog.startDate;\r\n          this.endDate = visitLog.endDate;\r\n          this.notes = visitLog.notes;\r\n          this.parkRef = visitLog.parkRef;\r\n        }\r\n      }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { VisitLog, VisitLogFormValues } from \"../models/visitLog\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class VisitLogStore {\r\n    currentVisitLog: VisitLog | undefined = undefined;\r\n    visitLogMap: Map<string, VisitLog> = new Map<string, VisitLog>();\r\n    loadingVisits: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.loadVisitLogs();\r\n    }\r\n\r\n    loadVisitLogs = async () => {\r\n        this.loadingVisits = true;\r\n        try {\r\n            const result = await agent.VisitLogs.getVisitLogs();\r\n            result.forEach(visitLog => {\r\n               this.setVisitLog(visitLog);\r\n            })\r\n            this.loadingVisits = false;\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.loadingVisits = false;\r\n        }\r\n    }\r\n\r\n    loadVisitLog = async (id: string) => {\r\n        let visitLog = this.getVisitLog(id);\r\n        if(visitLog) {\r\n            this.currentVisitLog = visitLog;\r\n            return visitLog;\r\n        } else {\r\n            this.loadingVisits = true;\r\n            try {\r\n                visitLog = await agent.VisitLogs.getVisitLog(id);\r\n                this.setVisitLog(visitLog);\r\n                runInAction(() => {\r\n                    this.currentVisitLog = visitLog;\r\n                    console.log(this.currentVisitLog);\r\n                    if(this.currentVisitLog !== undefined) {\r\n                        this.visitLogMap.set(this.currentVisitLog.id, this.currentVisitLog);\r\n                    }\r\n                });\r\n                this.loadingVisits = false\r\n                return visitLog;\r\n            } catch(error) {\r\n                console.log(error)\r\n                this.loadingVisits = false\r\n            }\r\n        }\r\n    }\r\n\r\n    getVisitLog = (id: string) => {\r\n        return this.visitLogMap.get(id);\r\n    }\r\n\r\n    visitLogsByPark = (parkId: string) => {\r\n        return Array.from(this.visitLogMap.values()).filter(vl => vl.parkRef === store.parkStore.getPark(parkId)?.id) || [];\r\n    }\r\n\r\n    get allVisitLogs() {\r\n        return Array.from(this.visitLogMap.values());\r\n    }\r\n\r\n    setVisitLog(visitLog: VisitLog) {\r\n        visitLog.startDate = new Date(visitLog.startDate!);\r\n        visitLog.endDate = new Date(visitLog.endDate!);\r\n        this.visitLogMap.set(visitLog.id, visitLog);\r\n    }\r\n\r\n    createVisitLog = async (parkId: string, visitLog: VisitLogFormValues) => {\r\n        try {\r\n            await agent.VisitLogs.addVisitLog(parkId, visitLog);\r\n            const newVisitLog = new VisitLog(visitLog);\r\n            this.setVisitLog(newVisitLog);\r\n            runInAction(() => {\r\n                console.log(this.currentVisitLog);\r\n                console.log(newVisitLog);\r\n                this.currentVisitLog = newVisitLog;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    editVisitLog = async (visitLog: VisitLogFormValues) => {\r\n        try {\r\n            await agent.VisitLogs.editVisitLog(visitLog);\r\n            runInAction(() => {\r\n                if (visitLog.id) {\r\n                    let updatedVisitLog = {...this.getVisitLog(visitLog.id), ...visitLog}\r\n                    this.visitLogMap.set(visitLog.id, updatedVisitLog as VisitLog);\r\n                    this.currentVisitLog = updatedVisitLog as VisitLog;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteVisitLog = async (id: string) => {\r\n        this.loadingVisits = true;\r\n        try {\r\n            await agent.VisitLogs.removeVisitLog(id);\r\n            runInAction(() => {\r\n                this.visitLogMap.delete(id);\r\n                this.loadingVisits = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingVisits = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearVisitLog = () => {\r\n        this.currentVisitLog = undefined;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CommonStore from \"./commonStore\";\r\nimport MapStore from \"./mapStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ParkCommentStore from \"./parkCommentStore\";\r\nimport ParkStore from \"./parkStore\";\r\nimport UserStore from \"./userStore\";\r\nimport VisitLogStore from \"./visitLogStore\";\r\n\r\ninterface Store {\r\n    commonStore: CommonStore;\r\n    parkStore: ParkStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    parkCommentStore: ParkCommentStore;\r\n    mapStore: MapStore;\r\n    visitLogStore: VisitLogStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    commonStore: new CommonStore(),\r\n    parkStore: new ParkStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    parkCommentStore: new ParkCommentStore(),\r\n    mapStore: new MapStore(),\r\n    visitLogStore: new VisitLogStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token, \r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n   \r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ParkComment } from \"../models/parkComment\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ParkCommentStore {\r\n    comments: ParkComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (parkId: string) => {\r\n        if(store.parkStore.currentPark) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?parkId=' + parkId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ParkComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ParkComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    \r\n    addComment = async (values: any) => {\r\n        values.parkId = store.parkStore.currentPark?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    \r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoaderComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function AppDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function AppTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { VisitLogFormValues } from '../../../app/models/visitLog';\r\nimport { Park } from '../../../app/models/park';\r\nimport AppDateInput from '../../../app/common/form/AppDateInput';\r\nimport AppTextInput from '../../../app/common/form/AppTextInput';\r\nimport AppTextArea from '../../../app/common/form/AppTextArea';\r\n\r\ninterface Props {\r\n    park: Park;\r\n    logId: string;\r\n}\r\n\r\nexport default observer(function VisitLogForm({park, logId}: Props) {\r\n    const history = useHistory();\r\n    const { visitLogStore, modalStore } = useStore();\r\n    const { createVisitLog, editVisitLog, loadVisitLog } = visitLogStore;\r\n\r\n    const [visitLog, setVisitLog] = useState<VisitLogFormValues>(new VisitLogFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The visit title is required'),\r\n        startDate: Yup.date().required('The start date is required'),\r\n        endDate: Yup.date().min(Yup.ref('startDate'), \"End date can not be before Start date\"),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (logId !== 'create') loadVisitLog(logId).then(visitLog => setVisitLog(new VisitLogFormValues(visitLog)))\r\n    }, [loadVisitLog, logId]);\r\n\r\n    function handleFormSubmit(visitLog: VisitLogFormValues) {\r\n        if (!visitLog.id) {\r\n            let newVisitLog = {\r\n                ...visitLog,\r\n                id: uuid(),\r\n                parkRef: park.id,\r\n                parkName: park.fullName\r\n            };\r\n            //Need park id here\r\n            createVisitLog(park.id, newVisitLog)\r\n                .finally(() => modalStore.closeModal());\r\n        } else {\r\n            editVisitLog(visitLog)\r\n                .finally(() => modalStore.closeModal());\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Visit Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={visitLog} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <AppTextInput name='title' placeholder='Title' />\r\n                        <Header content='Visit Dates' sub color='teal' />\r\n                        <AppDateInput \r\n                            placeholderText='Start Date'  \r\n                            name='startDate' \r\n                            showFullMonthYearPicker\r\n                            dateFormat='MMMM d, yyyy'\r\n                        />\r\n                        <AppDateInput \r\n                            placeholderText='End Date'  \r\n                            name='endDate' \r\n                            showFullMonthYearPicker\r\n                            dateFormat='MMMM d, yyyy'\r\n                        />\r\n                        <AppTextArea rows={5} placeholder='Notes' name='notes' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/parks' onClick={() => modalStore.closeModal()} floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Item, Image, Button, Segment, Container, Label, Popup, List} from 'semantic-ui-react';\r\nimport { Park } from '../../../app/models/park';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport VisitLogForm from '../../visits/form/VisitLogForm';\r\n\r\ninterface Props {\r\n    park: Park\r\n}\r\n\r\nexport default observer(function ParkDetails({park}: Props) {\r\n    const {userStore, parkStore, modalStore, visitLogStore} = useStore();\r\n    const {addVisitedPark, hasVisited, removeVisitedPark, loadingButtons, isLoggedIn } = userStore;\r\n    const {getCurrentImage, updateCurrentImage} = parkStore;\r\n    const {visitLogsByPark} = visitLogStore;\r\n    \r\n    const [target, setTarget] = useState('');\r\n    function changeTargetPark(e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group key={park.id}>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/parks/${park.id}`} style={{marginBottom:10}}>\r\n                                {park.fullName}\r\n                            </Item.Header>\r\n                            <Popup\r\n                                hoverable\r\n                                position='left center'\r\n                                trigger={\r\n                                    <Button onClick={() => updateCurrentImage(park.id)}style={{margins:'0', padding:'0'}}>\r\n                                        <Image src={park.images[getCurrentImage(park.id) || 0].url} size='huge'/>\r\n                                    </Button>\r\n                                }\r\n                            >\r\n                                <Popup.Content>\r\n                                    <List>\r\n                                        <List.Item>{park.images[getCurrentImage(park.id)!].title}</List.Item>\r\n                                        <List.Item>Credit: {park.images[getCurrentImage(park.id) || 0].credit}</List.Item>\r\n                                        <List.Item><a href={park.images[getCurrentImage(park.id) || 0].url}>{park.images[0].url}</a></List.Item>\r\n                                    </List>\r\n                                </Popup.Content>\r\n                            </Popup>\r\n                            <Item.Description>\r\n                                {park.description}\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment secondary clearing>\r\n                <Label size='medium' style={{float: 'right'}}>States: {park.states}</Label>\r\n                <Container>Latitude: {park.latLong.split(\",\")[0].split(\":\")[1]}</Container>\r\n                <Container>Longitude: {park.latLong.split(\",\")[1].split(\":\")[1]}</Container>\r\n            </Segment>  \r\n            <Segment clearing>\r\n                {(park.visitorCount === 1) ?\r\n                    <Label size='large'>{park.visitorCount} user has visited this park.</Label> :\r\n                    <Label size='large'>{park.visitorCount} users have visited this park.</Label>\r\n                }\r\n                {isLoggedIn ?\r\n                    hasVisited(park.id) ? (\r\n                        <>\r\n                            {visitLogsByPark(park.id).length > 0 &&\r\n                                <Button \r\n                                    name={park.id}\r\n                                    as={Link} to={`/visitlog/${park.id}`}\r\n                                    content={visitLogsByPark(park.id).length}\r\n                                    onClick={(e) => {\r\n                                        changeTargetPark(e);\r\n                                    }}\r\n                                    style={{float:'right', color: 'green'}}\r\n                                />\r\n                            }\r\n                            <Button \r\n                                onClick={() => modalStore.openModal(<VisitLogForm park={park} logId={'create'} />)} \r\n                                icon='plus' \r\n                                style={{float:'right', color: 'green'}}\r\n                            />\r\n                            <Button name={park.id} \r\n                                loading={loadingButtons && target === park.id} \r\n                                disabled={loadingButtons && target === park.id} \r\n                                onClick={(e) => {\r\n                                    changeTargetPark(e);\r\n                                    removeVisitedPark(park);\r\n                                    }\r\n                                } \r\n                                content='Visited' \r\n                                icon='check' \r\n                                style={{float:'right', color: 'green'}} \r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <Button name={park.id} \r\n                            loading={loadingButtons && target === park.id} \r\n                            disabled={loadingButtons && target === park.id} \r\n                            onClick={(e) => {\r\n                                changeTargetPark(e);\r\n                                addVisitedPark(park);\r\n                                }\r\n                            } \r\n                            content = 'Not Visited'\r\n                            icon='x' \r\n                            style={{float:'right', color: 'red'}} />\r\n                    ) : (\r\n                        <Popup\r\n                            hoverable\r\n                            position='right center'\r\n                            content='Create an account to use this feature!'\r\n                            trigger={\r\n                                <Button\r\n                                     \r\n                                    content = 'Not Visited'\r\n                                    icon='x' \r\n                                    style={{float:'right', color: 'red'}} />\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkDetails from '../details/ParkDetails';\r\n\r\nexport default observer(function AllParksList() {\r\n    const {parkStore} = useStore();\r\n    const {allParks} = parkStore;\r\n    \r\n    return (\r\n        <>\r\n            {allParks.map(([id, park]) => (\r\n                <ParkDetails key={id} park={park}/>\r\n            ))}\r\n        </>      \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nexport default observer(function VisitedParksList() {\r\n    const {userStore} = useStore();\r\n    const {visitedParksMap, allVisited} = userStore;\r\n\r\n    return (\r\n        <>\r\n            {visitedParksMap.size > 0 ? \r\n                <Menu style={{marginLeft:10}} vertical borderless>\r\n                    <Header content='Visited Parks' textAlign='center' style={{marginTop:10}} />\r\n                    {allVisited.map((park) => (\r\n                        <Menu.Item key={park[0]} as={Link} to={`/parks/${park[0]}`} >\r\n                            {park[1]}\r\n                        </Menu.Item>\r\n                    ))}\r\n                </Menu> :\r\n                <Header content='You have not visited any parks' textAlign='center'/>\r\n            }\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport AllParksList from './AllParksList';\r\nimport VisitedParksList from './VisitedParksList';\r\n\r\nexport default observer(function ParkDashboard() {\r\n    const {userStore, parkStore } = useStore();\r\n    const {loadParks, setPagingParams, pagination} = parkStore;\r\n    const {getUser, setVisitedParks, loadingVisitedList, isLoggedIn} = userStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadParks().then(() =>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(getUser != null) setVisitedParks();\r\n    }, [getUser, setVisitedParks])\r\n\r\n    if (isLoggedIn && loadingVisitedList)  return <LoaderComponent content='Loading Visited Parks' />;\r\n\r\n    return (\r\n        <>\r\n            <Grid>\r\n                <Grid.Column width='11'>\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <AllParksList />\r\n                    </InfiniteScroll>\r\n                </Grid.Column>\r\n                <Grid.Column width='5'>\r\n                    <VisitedParksList />\r\n                </Grid.Column>\r\n                <Grid.Column width={10}>\r\n                    <Loader active={loadingNext} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    parkId: string;\r\n}\r\n\r\nexport default observer(function ParkCommentsSection({parkId}: Props) {\r\n    const {parkCommentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(parkId) {\r\n            parkCommentStore.createHubConnection(parkId);\r\n        }\r\n        return () => {\r\n            parkCommentStore.clearComments();\r\n        }\r\n    }, [parkCommentStore, parkId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='left'\r\n                attached='top'\r\n                inverted\r\n                color='grey'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Comments</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik \r\n                    onSubmit={(values, {resetForm}) => parkCommentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{body:''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                        placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                        rows={2}\r\n                                        {...props.field}\r\n                                        onKeyPress={e => {\r\n                                            if (e.key === 'Enter' && e.shiftKey) {\r\n                                                return;\r\n                                            }\r\n                                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {parkCommentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                        <Comment.Content>\r\n                            <Comment.Author>{comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useRef } from 'react'\r\nimport { Park } from '../../../app/models/park';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    park: Park;\r\n}\r\n\r\nexport default observer(function ParkMap({park}: Props) {\r\n    const {mapStore} = useStore();\r\n    const {initMap, setMapOptions, setCoordinates} = mapStore;\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setMapOptions(11, setCoordinates(park));\r\n        initMap(ref);\r\n\r\n    }, [initMap, setMapOptions, setCoordinates, park]);\r\n\r\n    return (\r\n            <div className=\"map-container\" ref={ref}></div>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkCommentsSection from './ParkCommentsSection';\r\nimport ParkDetails from './ParkDetails';\r\nimport ParkMap from './ParkMap';\r\n\r\nexport default observer(function ParkDetailDashboard() {\r\n    const {parkStore, mapStore} = useStore();\r\n    const {currentPark: park, loadingInitial, loadPark} = parkStore;\r\n    const {mapScriptLoaded} = mapStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id) loadPark(id); \r\n    }, [id, loadPark]);\r\n\r\n\r\n\r\n    if (loadingInitial || !park) return <LoaderComponent content='Loading Park.'/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ParkDetails park={park}/>\r\n                <ParkCommentsSection parkId={park.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {mapScriptLoaded && (\r\n                    <ParkMap park={park}/>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Button, Container, Header, Label, Segment } from 'semantic-ui-react';\r\nimport { VisitLog } from '../../../app/models/visitLog';\r\nimport {format} from 'date-fns';\r\nimport VisitLogForm from '../form/VisitLogForm';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    visitLog: VisitLog;\r\n}\r\n\r\nexport default observer(function VisitLogDetails({visitLog}: Props) {\r\n    const history = useHistory();\r\n    const {modalStore, parkStore, visitLogStore} = useStore();\r\n    const {deleteVisitLog, loadingVisits} = visitLogStore;\r\n    const {currentPark: park} = parkStore;\r\n\r\n    const [target, setTarget] = useState('');\r\n    function changeTargetPark(e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group>\r\n                <Segment clearing>\r\n                    <Header as={Link} to={`/visitlog/${visitLog.parkRef}`} style={{marginBottom:10}}>\r\n                        {visitLog.title}\r\n                    </Header>\r\n                    \r\n                    <Button\r\n                        name={visitLog.id} \r\n                        loading={loadingVisits && target === visitLog.id}\r\n                        onClick={(e) => {\r\n                            changeTargetPark(e);\r\n                            deleteVisitLog(visitLog.id);\r\n                            }\r\n                        }\r\n                        color='red'\r\n                        icon='x' \r\n                        floated='right'></Button>\r\n                    <Button onClick={() =>\r\n                        modalStore.openModal(<VisitLogForm park={park!} logId={visitLog.id} />)} \r\n                        icon='edit'\r\n                        color='blue' \r\n                        floated='right' />\r\n                </Segment>\r\n                <Segment secondary clearing>\r\n                    <Label as={Link} to={`/parks/${visitLog.parkRef}`} style={{marginBottom:10}}>\r\n                        {visitLog.parkName}\r\n                    </Label>\r\n                    <Container>Start Date: {format(visitLog.startDate!, 'dd MMM yyyy')}</Container>\r\n                    <Container>End Date: {format(visitLog.endDate!, 'dd MMM yyyy')}</Container>\r\n                </Segment>\r\n                <Segment>\r\n                    <Container>{visitLog.notes}</Container>\r\n                </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Header } from \"semantic-ui-react\";\r\nimport { VisitLog } from \"../../app/models/visitLog\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport VisitLogDetails from \"./details/VisitLogDetails\";\r\n\r\nexport default observer(function ParkVisitLogList() {\r\n    const {visitLogStore} = useStore();\r\n    const {allVisitLogs} = visitLogStore;\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='All Visits' textAlign='center'/>\r\n            <Divider></Divider>\r\n            {allVisitLogs.map((visitLog: VisitLog) => (\r\n                <VisitLogDetails key={visitLog.id} visitLog={visitLog} />\r\n            ))}\r\n        </>      \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { User } from '../../app/models/user';\r\nimport { useStore } from '../../app/stores/store';\r\nimport userStore from '../../app/stores/userStore';\r\n\r\ninterface Props {\r\n    user: User;\r\n}\r\n\r\nexport default observer(function ProfileHeader({user}: Props) {\r\n    const {userStore, parkStore} = useStore();\r\n    const {allParkMap} = parkStore;\r\n    const {allVisited} = userStore;\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={user.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic>\r\n                        <Statistic.Value>{allVisited.length}</Statistic.Value>\r\n                        <Statistic.Label>Parks Visited</Statistic.Label>\r\n                    </Statistic>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport AllVisitLogList from '../visits/AllVisitLogList';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { userStore } = useStore();\r\n    const { user } = userStore;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {user &&\r\n                    <>\r\n                        <ProfileHeader user={user} />\r\n                        <AllVisitLogList />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport AppTextInput from '../../app/common/form/AppTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n                initialValues={{email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                    setErrors({error: 'Invalid email or password'}))}    \r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Parkedex' textAlign='center' />\r\n                    <AppTextInput name='email' placeholder='Email' />\r\n                    <AppTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{marginBottom:10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n            \r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport AppTextInput from '../../app/common/form/AppTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n                initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n                onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                    setErrors({error}))}   \r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Register at Parkedex' textAlign='center' />\r\n                    <AppTextInput name='displayName' placeholder='Display Name' />\r\n                    <AppTextInput name='username' placeholder='Username' />\r\n                    <AppTextInput name='email' placeholder='Email' />\r\n                    <AppTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n            \r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' size='huge' inverted>\r\n                    Parkedex\r\n                </Header>\r\n                <Header as='h2' size='medium' style={{marginTop: 10}} inverted>\r\n                    Gotta Visit 'Em All!\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Parkedex' />\r\n                        <Button as={Link} to='/parks' size='huge' inverted>\r\n                            Go to the Parks!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Divider></Divider>\r\n                            <Header as={Link} to='/parks' size='tiny' inverted>\r\n                                I just want National Park Info!\r\n                            </Header>\r\n                        </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Header } from 'semantic-ui-react';\r\nimport { Park } from '../../../app/models/park';\r\nimport { VisitLog } from '../../../app/models/visitLog';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport VisitLogDetails from '../details/VisitLogDetails';\r\n\r\ninterface Props {\r\n    park: Park;\r\n}\r\n\r\nexport default observer(function ParkVisitLogList({park}: Props) {\r\n    const {visitLogStore} = useStore();\r\n    const {visitLogsByPark} = visitLogStore;\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Visits' textAlign='center'/>\r\n            <Divider></Divider>\r\n            {visitLogsByPark(park.id).map((visitLog: VisitLog) => (\r\n                <VisitLogDetails key={visitLog.id} visitLog={visitLog} />\r\n            ))}\r\n        </>      \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoaderComponent from '../../../app/layout/LoaderComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ParkDetails from '../../parks/details/ParkDetails';\r\nimport ParkMap from '../../parks/details/ParkMap';\r\nimport ParkVisitLogList from './ParkVisitLogList';\r\n\r\nexport default observer(function VisitLogDashboard() {\r\n    const {visitLogStore, parkStore, userStore, mapStore} = useStore();\r\n    const {loadVisitLogs } = visitLogStore;\r\n    const {getUser, setVisitedParks, isLoggedIn} = userStore;\r\n    const {currentPark, loadPark, clearPark } = parkStore;\r\n    const {mapScriptLoaded} = mapStore;\r\n    const { id } = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        loadPark(id);\r\n        return() => {\r\n            clearPark()\r\n        } \r\n    }, [loadPark, clearPark, id]);\r\n\r\n    useEffect(() => {\r\n        if(getUser != null) {\r\n            setVisitedParks();\r\n            loadVisitLogs();\r\n        } \r\n    }, [getUser, setVisitedParks, loadVisitLogs])\r\n    \r\n    if (!currentPark || !isLoggedIn) return <LoaderComponent content='Loading Visit Details'/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ParkDetails park={currentPark}/>\r\n                    <ParkVisitLogList park={currentPark}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {mapScriptLoaded && (\r\n                    <ParkMap park={currentPark}/>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            {modalStore.modal.body}\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Dropdown, Icon, Menu } from 'semantic-ui-react';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport RegisterForm from '../../features/users/RegisterForm';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: {user, logout, isLoggedIn}, modalStore } = useStore();\r\n\r\n    return(\r\n        <Menu borderless fixed='top'>\r\n            <Container>\r\n                <Menu.Item header as={Link} to={'/parks'}>\r\n                    <Icon name='tree' />\r\n                    Parkedex\r\n                </Menu.Item>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Menu.Item as={Link} to={`/profile/${user?.displayName}`}>\r\n                            My Visits\r\n                        </Menu.Item> \r\n                        <Menu.Item position='right'>\r\n                            <Dropdown position='right' pointing='top left' text={user!.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profile/${user?.displayName}`} \r\n                                        text='My Profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Menu.Item onClick={() => modalStore.openModal(<LoginForm />)} name='Login' position='right' /> \r\n                        <Menu.Item onClick={() => modalStore.openModal(<RegisterForm />)} name='Register' /> \r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...remainder}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...remainder}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Container } from 'semantic-ui-react';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport ParkDashboard from '../../features/parks/dashboard/ParkDashboard';\r\nimport ParkDetailDashboard from '../../features/parks/details/ParkDetailDashboard';\r\nimport ProfileDashboard from '../../features/profiles/ProfileDashboard';\r\nimport SplashPage from '../../features/splash/SplashPage';\r\nimport VisitLogDashboard from '../../features/visits/dashboard/VisitLogDashboard';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport { useStore } from '../stores/store';\r\nimport LoaderComponent from './LoaderComponent';\r\nimport NavBar from './NavBar';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const {commonStore, userStore, mapStore, visitLogStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) { \r\n        userStore.getUser().then(() => userStore.setVisitedParks())\r\n          .then(() => visitLogStore.loadVisitLogs)\r\n          .finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore, visitLogStore])\r\n\r\n  useEffect(() => {\r\n    if(!mapStore.mapScriptLoaded) mapStore.loadMapApi(); \r\n  }, [mapStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoaderComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n    <ModalContainer />\r\n    <Route exact path='/' component={SplashPage} /> \r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => {\r\n          return (\r\n            <>\r\n              <NavBar />\r\n              <Container style={{ marginTop: '7em' }}>\r\n                <Route exact path='/parks' component={ParkDashboard} />\r\n                <Route path='/parks/:id' component ={ParkDetailDashboard} />\r\n                <PrivateRoute path='/visitlog/:id' component ={VisitLogDashboard} />\r\n                <PrivateRoute path='/profile/:username' component={ProfileDashboard} />\r\n                <Route path='/server-error' component={ServerError} />\r\n              </Container>\r\n            </>\r\n          );\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './app/layout/styles.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <StoreContext.Provider value={store}>\r\n      <Router history={history}>\r\n        <ScrollToTop />\r\n        <App />\r\n      </Router>\r\n    </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}